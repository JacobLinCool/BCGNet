# Preprocessor
def temp_seed(seed):
def preprocessor_ga(dataset, target_ch=[], opt=None):
def preprocessor_rs(data_dir, target_ch=[], run_id=None, N=None, opt=None):

# Normalize
def normalize_raw_data(raw_data, target_ch):
def normalize_raw_data_multi_ch(raw_data, target_ch=[]):
def normalize_rs_data_multi_ch(rs_data, fs):
def renormalize(data, stats, multi_ch, multi_run=False, vec_run_id=None):

# Epoch
def dataset_epoch(dataset, duration, epoch_rejection, threshold=None, raw_dataset=None, good_ix=None):
def modify_motion_data_with_bcg(rs_set, opt, shift=None):
def modify_motion_data(rs_set, run_id, N, opt):

# Arch
def get_arch(arch, opt=None):

# Split
def split_evaluation_test(epoched_data, per_evaluation):
def split_train_validation(epochs_evaluation, es_validation):
def generate_train_valid_test(epoched_data, opt=None):

# Default
class TrainDefault:
def defaults(opt):

# Run
def train_ds(epoched_data, target_ch, arch='gru_arch_000', overwrite=False, opt=None):
def train_sp(x_ev_train, x_ev_validation, y_ev_train, y_ev_validation, arch='gru_arch_000', overwrite=False, held_out=False, opt=None):
def predict_epoch(model, x_test, y_test, normalized_raw, vec_ix_slice_test, good_ix, opt=None):
def predict_epoch_multi_run(model, y_test, vec_normalized_raw, vec_ix_slice_test, vec_good_ix, vec_n_events, sts=None, opt=None):
def predict_series(model, normalized_raw, target_ch, ecg_stats, eeg_stats, plot, opt=None):
def predict_series_multi_run(model, vec_normalized_raw, vec_ecg_stats, vec_eeg_stats, sts=None, plot=True, opt=None):
def test_epoch_plot(x_test, y_test, testEpochPredict, ecg_stats, eeg_stats, opt):
def test_epoch_plot_multi_ch(x_test, y_test, testEpochPredict, ecg_stats, eeg_stats, opt=None):
def test_epoch_plot_multi_run(x_test, y_test, testEpochPredict, vec_ecg_stats, vec_eeg_stats, vec_run_id, vec_ix_slice_test, vec_n_events, sts=None, opt=None):
def series_prediction_plot(BCG_predicted, multi_ch, sts=None, opt=None, run_id=None):
def series_section_plot(ECG_raw_renorm, EEG_raw_renorm, EEG_BCG_removed_renorm, fmrib_raw, opt=None):
def series_section_plot_multi_run(vec_ECG_raw_renorm, vec_EEG_raw_renorm, vec_EEG_BCG_removed_renorm, vec_fmrib_raw, sts=None, opt=None):
def PSD_test_multi_ch(x_test, y_test, testEpochPredict, fmrib_raw, ecg_stats, eeg_stats, vec_ix_slice_test, good_ix=[], opt=None):
def PSD_test_multi_run(x_test, y_test, testEpochPredict, vec_fmrib_raw, vec_ecg_stats, vec_eeg_stats, vec_run_id, vec_ix_slice_test, vec_good_ix, vec_n_events, sts=None, opt=None):
def load_model(arch, mode=None, f_arch_in=None, opt=None):
def generate_cleaned_set(model, normalized_raw, ecg_stats, eeg_stats, opt=None):
def predict_bcginput(x_raw_data, model, target_ch):
def generate_cleaned_set_multi_run(model, vec_normalized_raw, vec_ecg_stats, vec_eeg_stats, opt=None):
def generate_bcg_dataset_multi_run(vec_ecg_raw_renorm, vec_bcg_predicted_renorm, vec_normalized_raw, opt=None):
def interpolator(bcg_net_raw, fmrib_raw):
def interpolator_multi_run(vec_bcg_net_raw, vec_fmrib_raw):
def user_defined_opt(opt):

# Main
def main_loop(str_sub, run_id, arch, opt=None):
def main_loop_multi_sub(vec_str_sub, run_id, arch, opt=None):
def test_opt(opt):
if __name__ == '__main__':
